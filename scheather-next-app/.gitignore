# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# for the weather api
.env.local

# Firebase admin scripts and keys (never commit these!)
app/lib/backfill-users.cjs
app/lib/backfill-users.js
app/lib/serviceAccountKey.json 

// backfill-users.js
import admin from "firebase-admin";
import serviceAccount from "./serviceAccountKey.json"

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const auth = admin.auth();
const db = admin.firestore();

async function backfillUsers() {
  let nextPageToken;
  do {
    const listUsersResult = await auth.listUsers(1000, nextPageToken);
    for (const userRecord of listUsersResult.users) {
      const { uid, email, displayName, photoURL } = userRecord;
      await db.collection("users").doc(uid).set(
        {
          uid,
          email,
          displayName: displayName || "",
          photoURL: photoURL || "",
        },
        { merge: true }
      );
      console.log(`Synced user: ${email}`);
    }
    nextPageToken = listUsersResult.pageToken;
  } while (nextPageToken);
  console.log("Backfill complete!");
}

backfillUsers().catch(console.error);

//serviceAccountKey.jason
{
  "type": "service_account",
  "project_id": "scheather-4c6b7",
  "private_key_id": "4469722a8b6575e2ca502984d49f8282c36bc84c",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDhIv+15tqn2vdI\naxhnmYUQIn9izZYKGom/g5MacfyEXeikFgAcWtloEqGXW5yV/iRtQ39ayTOiUAPz\n9fGoSGAvBlZvbbiNexH7w/cUKY/UCEM7U0I9v4le7Ws+tuW/aqaHr73rUtIgFuky\nDHOLp0X1LH+R7ODFikCquW6ca2NFolRATs2kXrBshA3KzBjAEyj0dMgOfNChyfy+\n1HLeJanXF5YWEFaMMl4JBJYnKAGXZPsyUbl/68rscOSN9WnXs3a99aIj5k4TEnSg\nyRFXOhDBNdqwJ8/6UBOrYmXHRp4CFKKOx/Xn9wjLMsZ/kPyupntUs2a7LI7hu1sb\nuaNo3AvnAgMBAAECggEAYYri5IJtaP1vVzKDY9t5cdiofXvaTm1aEh5lHTeWsxjm\n4zTe/moEONmdpnDcQoZWbPqqEoEK/H+Tft8nwQP+nFEwIN4WcEIKtByfD97EAJdF\n3c3AbPVwBK9z4DupBgqktTQY4nzDKoESrwsDAtZJ8qRBb02Ew0GXrABkYqQKYk/W\n3LGDp2oCpM1aEuCBID8Tjyx6E9+EoO4u2PZyI1PXsf1Td0EjR/4mi7HxGL+TCfqT\nyfCoWspmvYTJCmA5M/onOH8buPP5rxdmo1fHDbk6bFMlq+QRqsAxVSe5UchzKFDK\n5xx9UeDiRu37omvkbGB4KvWl68NGp9gddN63xrzNLQKBgQD6o9tQmi74ihLgO4sT\njJhvaPouCeO0XWqU5s8jeoOz5u1VPntnfHgNnVskkTIwhoUkC2it4NL5rwyrnSeh\nGUfzwIWKMpB5EJeYjVzZJF9TNw4iDTQsX3LKR+8sgWStf7rXCPjg0XOtMgyUHtYJ\n/NbnVWSvzT56g3NRpwIITrG90wKBgQDl84XKvSYu/D/9HGe2M75YY1ObHDf8xCfe\nwJcohiQTs28pZCaya3boLSjl2ir+c30NM6VLFHHW4UNT370vb9SMgBZ6jF1+icsS\nSlWb13MNcSYs0G4ONbHMTeETzHIoQZTcObLAMQpVGFHVNGGTU8Nf8e39Q0EI8tr3\nGGcNd+ppHQKBgCgcQOTNR+cOcabg4IjoXxy1OBRWENK0gHID3fJXkOwhcKnLrgQJ\nr0y+ee+ILPgHDxeNm9r3t8utb+Gm7MijOxiPHs/W97foJ9qKBOnbIEY48VIRut+/\nBqfIi0YcDviVEFmJXgrceh6le83YgXhnthyfVdWsiusgTjwq9fBOZ7NxAoGBAJ27\nLzjkCf8MtG/QPiuyzowehcjN0HGns5mODaGUcca5vDRuKEUWhde4smcIAZnMaijW\nFjmr6nJ0zhQIUuLpGKjPa5vgEHmt1wfSyWo+nQLJbGAtEHDaz/zOJufHwz5tzchK\nI5zFhsrcBbXzWkMOn+N+NbsVmNSkkSIRMQ8CBF7ZAoGAHodgBM+BOELz1sDIf06y\nxQ+8qTYsGBwuGM2D9KWY7ibpcTj0l6Nwd0PYzPmWSrG5fTJ0A/1H82D/6c9dRD11\nYi6grzMA4ndOJ2A6FP+agupgqjFieFbKueeeea9PGUMCBi8CL4QTHypEzpOIfHwp\nGk9DL5OK3cU8c+bAf55vnU8=\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-fbsvc@scheather-4c6b7.iam.gserviceaccount.com",
  "client_id": "118132542679654658434",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40scheather-4c6b7.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
